// <auto-generated />
using System;
using DBFIRST_Cities3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBFIRST_Cities3.Migrations
{
    [DbContext(typeof(WorldContext))]
    [Migration("20230903083424_YourMigrationName")]
    partial class YourMigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DBFIRST_Cities3.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CompeleteNameId")
                        .HasColumnType("int")
                        .HasColumnName("compeleteNameID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("countryId");

                    b.Property<int?>("HumidityId")
                        .HasColumnType("int")
                        .HasColumnName("humidityID");

                    b.Property<int?>("LatId")
                        .HasColumnType("int");

                    b.Property<int?>("LongId")
                        .HasColumnType("int");

                    b.Property<string>("Modifitime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modifitime");

                    b.Property<int?>("PopulationId")
                        .HasColumnType("int")
                        .HasColumnName("populationID");

                    b.Property<int?>("TempId")
                        .HasColumnType("int")
                        .HasColumnName("TempID");

                    b.HasKey("CityId");

                    b.HasIndex("CompeleteNameId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HumidityId");

                    b.HasIndex("LatId");

                    b.HasIndex("LongId");

                    b.HasIndex("PopulationId");

                    b.HasIndex("TempId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.CompeleNameofcity", b =>
                {
                    b.Property<int>("CompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompId"));

                    b.Property<string>("CopmName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompId");

                    b.ToTable("compeleNameofcity", (string)null);
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Country1", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("COUNTRY1", (string)null);
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Humidity", b =>
                {
                    b.Property<int>("Humidityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Humidityid"));

                    b.Property<int?>("Humidity1")
                        .HasColumnType("int")
                        .HasColumnName("Humidity");

                    b.HasKey("Humidityid");

                    b.ToTable("Humiditys");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Latitude", b =>
                {
                    b.Property<int>("LatitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LatitudeId"));

                    b.Property<string>("Latitude1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Latitude");

                    b.HasKey("LatitudeId");

                    b.ToTable("Latitudes");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Longitude", b =>
                {
                    b.Property<int>("LongitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LongitudeId"));

                    b.Property<string>("Longitude1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Longitude");

                    b.HasKey("LongitudeId");

                    b.ToTable("Longitudes");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Pop", b =>
                {
                    b.Property<int>("PopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("popID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PopId"));

                    b.Property<int?>("Popvalue")
                        .HasColumnType("int");

                    b.HasKey("PopId");

                    b.ToTable("pop", (string)null);
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Temperature", b =>
                {
                    b.Property<int>("TempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TempID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempId"));

                    b.Property<int?>("Temperature1")
                        .HasColumnType("int")
                        .HasColumnName("Temperature");

                    b.HasKey("TempId");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.City", b =>
                {
                    b.HasOne("DBFIRST_Cities3.Models.CompeleNameofcity", "CompeleteName")
                        .WithMany("Cities")
                        .HasForeignKey("CompeleteNameId")
                        .HasConstraintName("FK_Cities_Cities");

                    b.HasOne("DBFIRST_Cities3.Models.Country1", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Cities_COUNTRY1");

                    b.HasOne("DBFIRST_Cities3.Models.Humidity", "Humidity")
                        .WithMany("Cities")
                        .HasForeignKey("HumidityId")
                        .HasConstraintName("FK_Cities_Humiditys");

                    b.HasOne("DBFIRST_Cities3.Models.Latitude", "Lat")
                        .WithMany("Cities")
                        .HasForeignKey("LatId")
                        .HasConstraintName("FK_Cities_Latitudes");

                    b.HasOne("DBFIRST_Cities3.Models.Longitude", "Long")
                        .WithMany("Cities")
                        .HasForeignKey("LongId")
                        .HasConstraintName("FK_Cities_Longitudes");

                    b.HasOne("DBFIRST_Cities3.Models.Pop", "Population")
                        .WithMany("Cities")
                        .HasForeignKey("PopulationId")
                        .HasConstraintName("FK_Cities_pop");

                    b.HasOne("DBFIRST_Cities3.Models.Temperature", "Temp")
                        .WithMany("Cities")
                        .HasForeignKey("TempId")
                        .HasConstraintName("FK_Cities_Temperatures");

                    b.Navigation("CompeleteName");

                    b.Navigation("Country");

                    b.Navigation("Humidity");

                    b.Navigation("Lat");

                    b.Navigation("Long");

                    b.Navigation("Population");

                    b.Navigation("Temp");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.CompeleNameofcity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Country1", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Humidity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Latitude", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Longitude", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Pop", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DBFIRST_Cities3.Models.Temperature", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
